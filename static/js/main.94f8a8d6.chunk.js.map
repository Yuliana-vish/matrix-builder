{"version":3,"sources":["redux/matrix/types.js","core/function/index.js","redux/matrix/actions.js","Components/Form/SettingsInput.js","Components/Form/index.js","Components/TableMatrix/TableHeader/index.js","Components/TableMatrix/TableBody/ColumnAvg.js","Components/TableMatrix/TableBody/RowSumCell.js","Components/TableMatrix/TableBody/Percentage.js","Components/TableMatrix/TableBody/TableItem.js","Components/TableMatrix/TableBody/RemoveButton.js","Components/TableMatrix/TableBody/index.js","Components/TableMatrix/Button/index.js","Components/TableMatrix/index.js","Components/RandomWords/WordList.js","Components/RandomWords/index.js","App.js","redux/matrix/reducer.js","redux/store.js","index.js"],"names":["types","SET_SETTINGS","CREATE_MATRIX","INCREMENT_CELL","ADD_ROW","DELETE_ROW","SET_NEAREST_CELLS","RESET_NEAREST_CELLS","randomGenerator","Amount","Math","floor","random","ID","uuidv4","createMatrix","settings","columns","rows","arr","Array","fill","map","el","i","console","log","matrixRows","start","slice","matrixSort","matrix","flat","item","sort","a","b","sumRowNumbers","row","reduce","acc","Number","sumRowAvg","avg","addRow","type","payload","deleteRow","index","setSettings","sortedMatrix","incrementCell","setNearestCells","cells","nearest","copySortedMatrix","nearestCells","copySortedMatrixId","itemIndex","indexOf","length","prevEl","nextEl","splice","push","findNearestCells","resetNearestCells","SettingsInput","addInputData","className","htmlFor","name","min","value","onChange","Form","handleClick","event","currentTarget","setState","submitForm","preventDefault","state","props","reset","onSubmit","this","Component","mapDispatchToProps","actions","connect","topCells","TableHeader","banner","TopUnit","ColumnAvg","useState","setAvg","useEffect","calc","columnAvg","j","round","calcAvgNumbers","RowSumCell","handleMouseEnter","handleMouseLeave","sum","setSum","onMouseEnter","onMouseLeave","Percentage","percent","toFixed","style","height","cx","includes","onClick","removeRow","showPercent","setShowPercent","JSON","stringify","WordsList","words","setWords","addLetter","word","toString","id","RandomWords","fetchApi","axios","get","response","data","setMatrix","initialState","newMatrixRows","filter","every","element","arrRow","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94f8a8d6.chunk.js","sourcesContent":["const types = {\r\n  SET_SETTINGS: 'SET_SETTINGS',\r\n  CREATE_MATRIX: 'CREATE_MATRIX',\r\n  INCREMENT_CELL: 'INCREMENT_CELL',\r\n  ADD_ROW: 'ADD_ROW',\r\n  DELETE_ROW: 'DELETE_ROW',\r\n  SET_NEAREST_CELLS: 'SET_NEAREST_CELLS',\r\n  RESET_NEAREST_CELLS: 'RESET_NEAREST_CELLS',\r\n};\r\nexport default types;\r\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const randomGenerator = () => ({\r\n  Amount: Math.floor(Math.random() * (999 - 100 + 1)) + 100,\r\n  ID: uuidv4(),\r\n});\r\n\r\nexport const createMatrix = settings => {\r\n  if (settings.columns && settings.rows) {\r\n    const arr = new Array(settings.columns * settings.rows)\r\n      .fill(0)\r\n      .map((el, i) => {\r\n        return randomGenerator();\r\n      });\r\n    console.log(arr);\r\n\r\n    let matrixRows = [];\r\n    let start = 0;\r\n    for (let i = 0; i < settings.rows; i++) {\r\n      matrixRows = [\r\n        ...matrixRows,\r\n        arr.slice(start, settings.columns * (i + 1)),\r\n      ];\r\n      start = settings.columns * (i + 1);\r\n    }\r\n    return matrixRows;\r\n  }\r\n};\r\n\r\nexport const matrixSort = matrix =>\r\n  matrix\r\n    .flat()\r\n    .map(item => item)\r\n    .sort((a, b) => a.Amount - b.Amount);\r\n\r\nexport const sumRowNumbers = row => {\r\n  return row.reduce((acc, el) => acc + Number(el.Amount), 0);\r\n};\r\n\r\nexport const sumRowAvg = avg => {\r\n  return avg.reduce((acc, el) => acc + Number(el), 0);\r\n};\r\n\r\nexport const calcAvgNumbers = (columns, rows, matrixRows) => {\r\n  let columnAvg = [];\r\n  for (let i = 0; i < columns; i++) {\r\n    let acc = 0;\r\n    for (let j = 0; j < rows; j++) {\r\n      acc += Number(matrixRows[j][i].Amount);\r\n    }\r\n    columnAvg = [...columnAvg, Math.round(acc / Number(rows))];\r\n  }\r\n  return columnAvg;\r\n};\r\n\r\nexport const findNearestCells = (cells, sortedMatrix, item) => {\r\n  let copySortedMatrix = [...[], ...sortedMatrix];\r\n  let nearestCells = [];\r\n\r\n  for (let i = 0; i < cells; i++) {\r\n    const copySortedMatrixId = copySortedMatrix.map(item => item.ID);\r\n\r\n    if (item) {\r\n      let nearest;\r\n      const itemIndex = copySortedMatrixId.indexOf(item.ID);\r\n      if (itemIndex === 0) {\r\n        nearest = copySortedMatrix[1];\r\n      } else if (itemIndex === copySortedMatrix.length - 1) {\r\n        nearest = copySortedMatrix[copySortedMatrix.length - 2];\r\n      } else {\r\n        const prevEl = copySortedMatrix[itemIndex - 1];\r\n        const nextEl = copySortedMatrix[itemIndex + 1];\r\n        nearest =\r\n          item.Amount - prevEl.Amount > nextEl.Amount - item.Amount\r\n            ? nextEl\r\n            : prevEl;\r\n      }\r\n      copySortedMatrix.splice(copySortedMatrixId.indexOf(nearest.ID), 1);\r\n      nearestCells.push(nearest);\r\n    }\r\n  }\r\n  return nearestCells;\r\n};\r\n","import types from './types';\r\nimport {\r\n  createMatrix,\r\n  findNearestCells,\r\n  matrixSort,\r\n} from '../../core/function';\r\n\r\nexport const setSettings = settings => {\r\n  const matrix = createMatrix(settings);\r\n  const sortedMatrix = matrixSort(matrix);\r\n  return {\r\n    type: types.SET_SETTINGS,\r\n    payload: { settings, matrix, sortedMatrix },\r\n  };\r\n};\r\n\r\nexport const incrementCell = item => ({\r\n  type: types.INCREMENT_CELL,\r\n  payload: item,\r\n});\r\nexport const deleteRow = index => ({\r\n  type: types.DELETE_ROW,\r\n  payload: index,\r\n});\r\nexport const addRow = row => ({\r\n  type: types.ADD_ROW,\r\n  payload: row,\r\n});\r\n\r\nexport const setNearestCells = (cells, sortedMatrix, item) => {\r\n  const nearest = findNearestCells(cells, sortedMatrix, item);\r\n  return {\r\n    type: types.SET_NEAREST_CELLS,\r\n    payload: { sortedMatrix, nearest },\r\n  };\r\n};\r\n\r\nexport const resetNearestCells = () => ({\r\n  type: types.RESET_NEAREST_CELLS,\r\n});\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  addRow,\r\n  deleteRow,\r\n  setSettings,\r\n  incrementCell,\r\n  createMatrix,\r\n  setNearestCells,\r\n  resetNearestCells,\r\n};\r\n","const SettingsInput = ({ addInputData, columns, rows, cells }) => {\r\n  return (\r\n    <>\r\n      <div className=\"form-input\">\r\n        <label className=\"input-text\" htmlFor=\"/\">\r\n          enter the number of columns\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"input\"\r\n          name=\"columns\"\r\n          min=\"0\"\r\n          value={columns}\r\n          onChange={addInputData}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-input\">\r\n        <label className=\"input-text\" htmlFor=\"/\">\r\n          enter the number of rows\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"input\"\r\n          name=\"rows\"\r\n          min=\"0\"\r\n          value={rows}\r\n          onChange={addInputData}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-input\">\r\n        <label className=\"input-text\" htmlFor=\"/\">\r\n          enter the number of cells\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          className=\"input\"\r\n          name=\"cells\"\r\n          min=\"0\"\r\n          value={cells}\r\n          onChange={addInputData}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"btn-form\">\r\n        <button className=\"button btn-create\" type=\"submit\">\r\n          create matrix\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsInput;\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/matrix/actions';\r\nimport SettingsInput from './SettingsInput';\r\n\r\nclass Form extends Component {\r\n  handleClick = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: +value });\r\n  };\r\n\r\n  submitForm = event => {\r\n    event.preventDefault();\r\n    const settings = {\r\n      columns: this.state.columns,\r\n      rows: this.state.rows,\r\n      cells: this.state.cells,\r\n    };\r\n    this.props.setSettings(settings);\r\n    console.log(settings);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ columns: '', rows: '', cells: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"/\" onSubmit={this.submitForm}>\r\n          <h1 className=\"title\">Matrix builder</h1>\r\n          <SettingsInput addInputData={this.handleClick} {...this.state} />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  settings: state.settings,\r\n});\r\nconst mapDispatchToProps = {\r\n  setSettings: actions.setSettings,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","const topCells = value => {\r\n  return (\r\n    <th className=\"header-item\" key={value}>\r\n      {value}\r\n    </th>\r\n  );\r\n};\r\n\r\nconst TopUnit = columns => {\r\n  let banner = [topCells('№')];\r\n  for (let i = 0; i < columns; i++) {\r\n    banner.push(topCells(i + 1));\r\n  }\r\n  banner.push(topCells('Sum'));\r\n  return banner;\r\n};\r\n\r\nconst TableHeader = ({ columns }) => {\r\n  const banner = TopUnit(columns);\r\n  return (\r\n    <thead className=\"table-header\">\r\n      <tr>{banner}</tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default TableHeader;\r\n","import { useEffect, useState } from 'react';\r\nimport { sumRowAvg, calcAvgNumbers } from '../../../core/function';\r\n\r\nconst ColumnAvg = ({ columns, rows, matrixRows }) => {\r\n  const [avg, setAvg] = useState();\r\n\r\n  useEffect(() => {\r\n    if (matrixRows) {\r\n      const calc = calcAvgNumbers(columns, rows, matrixRows);\r\n      setAvg(calc);\r\n    }\r\n  }, [columns, rows, matrixRows]);\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"banner\">Avg</td>\r\n      {avg &&\r\n        avg.map((el, index) => (\r\n          <td className=\"table-item\" key={index}>\r\n            <div className=\"amount avg\">{el}</div>\r\n          </td>\r\n        ))}\r\n      {avg && (\r\n        <td className=\"table-item\">\r\n          <div className=\"amount avg\">{sumRowAvg(avg)}</div>\r\n        </td>\r\n      )}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ColumnAvg;\r\n","import { useState, useEffect } from 'react';\r\nimport { sumRowNumbers } from '../../../core/function';\r\n\r\nconst RowSumCell = ({ row, handleMouseEnter, handleMouseLeave }) => {\r\n  const [sum, setSum] = useState(sumRowNumbers(row));\r\n\r\n  useEffect(() => {\r\n    setSum(sumRowNumbers(row));\r\n  }, [row]);\r\n\r\n  return (\r\n    <td\r\n      className=\"table-item\"\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      <div className=\"amount sum\">{sum}</div>\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default RowSumCell;\r\n","import { sumRowNumbers } from '../../../core/function';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Percentage = ({ item, row }) => {\r\n  const [sum, setSum] = useState(sumRowNumbers(row));\r\n\r\n  useEffect(() => {\r\n    setSum(sumRowNumbers(row));\r\n  }, [row]);\r\n\r\n  const percent = ((item.Amount * 100) / sum).toFixed();\r\n\r\n  return (\r\n    <div className=\"percent\">\r\n      <div className=\"percent-text\">{percent}%</div>\r\n      <div className=\"column-percent\" style={{ height: percent + '%' }}></div>\r\n    </div>\r\n  );\r\n};\r\nexport default Percentage;\r\n","import { connect } from 'react-redux';\r\nimport cx from 'classnames';\r\nimport actions from '../../../redux/matrix/actions';\r\n\r\nconst TableItem = ({\r\n  item,\r\n  incrementCell,\r\n  cells,\r\n  sortedMatrix,\r\n  setNearestCells,\r\n  resetNearestCells,\r\n  nearest,\r\n}) => {\r\n  const onClickItem = () => {\r\n    if (item.Amount < 999) {\r\n      incrementCell(item);\r\n      handleMouseEnter();\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = () => {\r\n    setNearestCells(cells, sortedMatrix, item);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    resetNearestCells();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cx('amount', {\r\n        'nearest-item': nearest && nearest.includes(item),\r\n      })}\r\n      onClick={onClickItem}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      {item.Amount}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  nearest: state.matrix.nearest,\r\n  sortedMatrix: state.matrix.sortedMatrix,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  incrementCell: actions.incrementCell,\r\n  setNearestCells: actions.setNearestCells,\r\n  resetNearestCells: actions.resetNearestCells,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableItem);\r\n","import { connect } from 'react-redux';\r\nimport actions from '../../../redux/matrix/actions';\r\n\r\nconst RemoveButton = ({ index, deleteRow }) => {\r\n  const removeRow = () => {\r\n    deleteRow(index);\r\n    console.log(removeRow);\r\n  };\r\n\r\n  return (\r\n    <td className=\"banner\">\r\n      <button\r\n        className=\"remove-button\"\r\n        type=\"submit\"\r\n        onClick={() => removeRow()}\r\n      >\r\n        x\r\n      </button>\r\n    </td>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  deleteRow: actions.deleteRow,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RemoveButton);\r\n","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ColumnAvg from './ColumnAvg';\r\nimport RowSumCell from './RowSumCell';\r\nimport Percentage from './Percentage';\r\nimport TableItem from './TableItem';\r\nimport RemoveButton from './RemoveButton';\r\n\r\nconst TableBody = ({ columns, rows, cells, matrixRows }) => {\r\n  const [showPercent, setShowPercent] = useState(-1);\r\n\r\n  return (\r\n    <tbody>\r\n      {!!matrixRows &&\r\n        matrixRows.map((row, i) => (\r\n          <tr key={JSON.stringify(row)}>\r\n            <td className=\"banner\">{i + 1}</td>\r\n            {row.map(item => (\r\n              <td className=\"table-item\" key={item.Amount}>\r\n                {showPercent === i ? (\r\n                  <Percentage item={item} row={row} />\r\n                ) : (\r\n                  <TableItem item={item} cells={cells} />\r\n                )}\r\n              </td>\r\n            ))}\r\n            <RowSumCell\r\n              row={row}\r\n              handleMouseEnter={() => setShowPercent(i)}\r\n              handleMouseLeave={() => setShowPercent(-1)}\r\n            />\r\n            <RemoveButton index={i} matrixRows={matrixRows} rows={rows} />\r\n          </tr>\r\n        ))}\r\n      <ColumnAvg matrixRows={matrixRows} columns={columns} rows={rows} />\r\n    </tbody>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  columns: state.matrix.settings.columns,\r\n  rows: state.matrix.settings.rows,\r\n  cells: state.matrix.settings.cells,\r\n  arr: state.matrix.arr,\r\n  matrixRows: state.matrix.matrixRows,\r\n  sortedMatrix: state.matrix.sortedMatrix,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TableBody);\r\n","import { connect } from 'react-redux';\r\nimport actions from '../../../redux/matrix/actions';\r\n\r\nconst Button = ({ addRow, matrixRows }) => {\r\n  const handleAddRow = () => {\r\n    addRow(matrixRows);\r\n    console.log(addRow);\r\n  };\r\n\r\n  return (\r\n    <div className=\"btn-matrix\">\r\n      <button\r\n        className=\"button btn-addrow\"\r\n        type=\"button\"\r\n        onClick={() => handleAddRow()}\r\n      >\r\n        add row\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  rows: state.matrix.settings.rows,\r\n  matrixRows: state.matrix.matrixRows,\r\n});\r\nconst mapDispatchToProps = {\r\n  addRow: actions.addRow,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);\r\n\r\n\r\n","import { connect } from 'react-redux';\r\nimport TableHeader from './TableHeader';\r\nimport TableBody from './TableBody';\r\nimport Button from './Button';\r\n\r\nconst TableMatrix = ({ settings }) => {\r\n  //console.log('settings', settings);\r\n  return (\r\n    <div className=\"table\">\r\n      {settings.columns && settings.rows && settings.cells && <Button />}\r\n      <table className=\"table-matrix\">\r\n        {settings.columns && settings.rows && settings.cells && (\r\n          <>\r\n            <TableHeader {...settings} />\r\n            <TableBody />\r\n          </>\r\n        )}\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  settings: state.matrix.settings,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TableMatrix);\r\n","// import { useState, useEffect } from 'react';\r\n\r\nconst WordsList = ({ words, setWords }) => {\r\n  //   const [newWord, setNewWord] = useState();\r\n\r\n  //   useEffect(() => {\r\n  //     setWords(\r\n  //       words.map(word => {\r\n  //         if (word.id === newWord.id) {\r\n  //           word.value = newWord.value;\r\n  //         }\r\n  //         return words;\r\n  //       }),\r\n  //     );\r\n  //     console.log(newWord);\r\n  //   }, [newWord]);\r\n\r\n  const addLetter = word => {\r\n    const a = Math.random().toString(36).slice(-1);\r\n    // return (word.value += a);\r\n    return word.value + a;\r\n  };\r\n\r\n  const handleClick = word => {\r\n    // addLetter(word);\r\n    // setNewWord(word);\r\n    setWords(\r\n      words.map(item =>\r\n        item.id === word.id ? { ...item, value: addLetter(word) } : item,\r\n      ),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {words &&\r\n        words.map(word => (\r\n          <div\r\n            className=\"words-title\"\r\n            key={JSON.stringify(word)}\r\n            onClick={() => handleClick(word)}\r\n          >\r\n            {word.value}\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\nexport default WordsList;\r\n","import { useState } from 'react';\r\nimport WordsList from './WordList';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst RandomWords = () => {\r\n  const [words, setWords] = useState([]);\r\n\r\n  const handleClick = () => {\r\n    fetchApi();\r\n  };\r\n\r\n  const fetchApi = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        'https://random-word-api.herokuapp.com/word?number=5',\r\n      );\r\n      setWords(\r\n        response.data.map(el => {\r\n          return { value: el, id: uuidv4() };\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"random-words\">\r\n        <button\r\n          className=\"button btn-random\"\r\n          type=\"submit\"\r\n          onClick={handleClick}\r\n        >\r\n          get random words\r\n        </button>\r\n        <div>\r\n          <WordsList words={words} setWords={setWords} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RandomWords;\r\n","import Form from './Components/Form';\nimport TableMatrix from './Components/TableMatrix';\nimport RandomWords from './Components/RandomWords';\n\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { useState, useEffect } from 'react';\n\nconst App = ({ settings }) => {\n  const [matrix, setMatrix] = useState(false);\n\n  useEffect(() => {\n    setMatrix(true);\n  }, [settings]);\n\n  return (\n    <>\n      <section className=\"section-form\">\n        <Form />\n      </section>\n      <section className=\"section-table\">{matrix && <TableMatrix />}</section>\n      <section className=\"section-words\">\n        <RandomWords />\n      </section>\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  settings: state.matrix.settings,\n});\n\nexport default connect(mapStateToProps)(App);\n","import types from './types';\r\nimport { randomGenerator, matrixSort } from '../../core/function';\r\n\r\nconst initialState = {\r\n  settings: {\r\n    columns: '',\r\n    rows: '',\r\n    cells: '',\r\n  },\r\n  matrixRows: [],\r\n  sortedMatrix: [],\r\n  nearest: [],\r\n};\r\n\r\nexport const matrix = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case types.SET_SETTINGS:\r\n      return {\r\n        ...state.settings,\r\n        settings: payload.settings,\r\n        matrixRows: payload.matrix,\r\n        sortedMatrix: payload.sortedMatrix,\r\n      };\r\n\r\n    case types.CREATE_MATRIX:\r\n      return { ...state, matrixRows: [...payload] };\r\n\r\n    case types.INCREMENT_CELL:\r\n      const newMatrixRows = state.matrixRows.map(row => {\r\n        return row.map(item => {\r\n          if (item.ID === payload.ID) {\r\n            item.Amount += 1;\r\n            return item;\r\n          }\r\n          return item;\r\n        });\r\n      });\r\n      return {\r\n        ...state,\r\n        matrixRows: newMatrixRows,\r\n        sortedMatrix: [...matrixSort([...state.sortedMatrix])],\r\n      };\r\n\r\n    case types.DELETE_ROW:\r\n      return {\r\n        ...state,\r\n        sortedMatrix: [\r\n          ...matrixSort([\r\n            ...state.sortedMatrix.filter(el =>\r\n              state.matrixRows[payload].every(element => element.ID !== el.ID),\r\n            ),\r\n          ]),\r\n        ],\r\n        matrixRows: state.matrixRows.filter((el, index) => index !== payload),\r\n        settings: { ...state.settings, rows: state.settings.rows - 1 },\r\n      };\r\n\r\n    case types.ADD_ROW:\r\n      const arrRow = new Array(state.settings.columns * 1).fill(0).map(() => {\r\n        return randomGenerator();\r\n      });\r\n      return {\r\n        ...state,\r\n        settings: { ...state.settings, rows: state.settings.rows + 1 },\r\n        matrixRows: [...state.matrixRows, arrRow],\r\n        sortedMatrix: [...matrixSort([...state.sortedMatrix, ...arrRow])],\r\n      };\r\n\r\n    case types.SET_NEAREST_CELLS:\r\n      return {\r\n        ...state,\r\n        nearest: [...payload.nearest],\r\n      };\r\n\r\n    case types.RESET_NEAREST_CELLS:\r\n      return { ...state, nearest: initialState.nearest };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default matrix;\r\n","import { createStore, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { matrix } from './matrix/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  matrix,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}